# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

# 테스트 주석!!!!!
trigger:
  - main

pool:
  name: VM
  demands:
    - Agent.Name -equals Ubuntu 20.04
    - Agent.OS -equals Linux
    - Agent.OSArchitecture -equals X64

jobs:
  - job: jdk15
    variables:
      - name: jdk_version
        value: "15"
      - name: jdk_file
        value: "./builds/openjdk-15.0.0_linux-x64_bin.tar.gz"
      - name: curl_download_jdk
        value: "https://cdn.azul.com/zulu/bin/zulu15.34.17-ca-jdk15.0.4-linux_x64.tar.gz > ./builds/openjdk-15.0.0_linux-x64_bin.tar.gz"

    steps:
      - template: ./templates/java-install.yml
        parameters:
          jdk_version: "$(jdk_version)"
          jdk_file: "$(jdk_file)"
          curl_download_jdk: "$(curl_download_jdk)"

      - template: ./templates/build.yml
        parameters:
          jdk_version: "$(jdk_version)"
          patch: "++"

      - template: ./templates/publish-build-artifacts.yml
        parameters:
          contests: "dist/**"
          artifactName: "annotation-scanner"

  - job: jdk14
    variables:
      - name: jdk_version
        value: "14"
      - name: jdk_file
        value: "./builds/openjdk-14.0.2_linux-x64_bin.tar.gz"
      - name: curl_download_jdk
        value: "https://cdn.azul.com/zulu/bin/zulu14.29.23-ca-jdk14.0.2-linux_x64.tar.gz > ./builds/openjdk-14.0.2_linux-x64_bin.tar.gz"

    steps:
      - template: ./templates/java-install.yml
        parameters:
          jdk_version: "$(jdk_version)"
          jdk_file: "$(jdk_file)"
          curl_download_jdk: "$(curl_download_jdk)"

      - template: ./templates/build.yml
        parameters:
          jdk_version: "$(jdk_version)"
          patch: "++"
      
      - template: ./templates/publish-build-artifacts.yml
        parameters:
          contests: "dist/**"
          artifactName: "annotation-scanner"

  - job: jdk11
    variables:
      - name: jdk_version
        value: "11"
      - name: jdk_file
        value: "./builds/openjdk-11.0.12_linux-x64_bin.tar.gz"
      - name: curl_download_jdk
        value: "https://cdn.azul.com/zulu/bin/zulu11.50.19-ca-jdk11.0.12-linux_x64.tar.gz > ./builds/openjdk-11.0.12_linux-x64_bin.tar.gz"

    steps:
      - template: ./templates/java-install.yml
        parameters:
          jdk_version: "$(jdk_version)"
          jdk_file: "$(jdk_file)"
          curl_download_jdk: "$(curl_download_jdk)"

      - template: ./templates/build.yml
        parameters:
          jdk_version: "$(jdk_version)"
          patch: "++"

      - template: ./templates/publish-build-artifacts.yml
        parameters:
          contests: "dist/**"
          artifactName: "annotation-scanner"

  - job: versioning
    dependsOn:
      - jdk11
      - jdk14
      - jdk15

    variables: 
      - name: git_email
        value: "cb1-1@softcamp.co.kr"
      - name: git_user_name
        value: "Product Development Team 1"

    steps:
      - template: ./templates/versioning.yml
        parameters:
          git_email: "$(git_email)"
          git_user_name: "$(git_user_name)"



# - task: CopyFiles@2
#   inputs:
#     Contents: ${{ parameters.contests }}
#     TargetFolder: "$(Build.ArtifactStagingDirectory)"
#   displayName: "copy dist dir to artifactstagingdirectory"

# - bash: |
#     mkdir -p $(Build.ArtifactStagingDirectory)/$(jdk_version)
#     cp -R `cat ./artifacts_path`/*  $(Build.ArtifactStagingDirectory)/$(jdk_version)
#   displayName: Move build artifacts to artifact path

# - bash: |
#     cp -R DockerFile $(Build.ArtifactStagingDirectory)
#     cd $(Build.ArtifactStagingDirectory)
#   displayName: Move DockerFile to artifact path

# - bash: |
#     buildTag=`sudo cat ./artifacts_path | xargs basename`
#     echo $buildTag
#     echo "##vso[task.setvariable variable=_buildTag]$buildTag"
#     echo "##vso[build.addbuildtag]$buildTag"
#   displayName: Write pipeline build number

# - task: Docker@2
#   displayName: Build and push an image to container registry
#   inputs:
#     command: buildAndPush
#     repository: $(imageRepository)
#     dockerfile: $(dockerfilePath)
#     containerRegistry: $(dockerRegistryServiceConnection)
#     tags: |
#       $(tag)
#       $(_buildTag)
#       latest

# - publish: $(Build.ArtifactStagingDirectory)/$(jdk_version)
#   artifact: dxl-logger_jdk$(jdk_version)
